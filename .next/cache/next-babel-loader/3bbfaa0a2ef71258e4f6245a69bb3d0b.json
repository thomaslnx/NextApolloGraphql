{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/marcos/Desktop/NextApolloGraphql/src/pages/index.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query companies {\\n    id\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { withApollo } from '../libs/apollo'; // import { useQuery } from '@apollo/react-hooks';\n// import { ALL_CONSULTS } from '../gql/allConsults';\n\nimport { gql, useQuery } from '@apollo/client';\nvar GET_COMPANIES = gql(_templateObject());\n\nvar Home = function Home() {\n  _s();\n\n  var _useQuery = useQuery(GET_COMPANIES),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (error) {\n    return __jsx(\"h1\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 14\n      }\n    }, \"Error\");\n  }\n\n  if (loading) {\n    return __jsx(\"h1\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 14\n      }\n    }, \"Loading...\");\n  }\n\n  return __jsx(React.Fragment, null, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, \"Nextjs, Apollo and GraphQl setup\"), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, data.characters.results.map(function (data) {\n    return __jsx(\"ul\", {\n      key: data.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }\n    }, __jsx(\"li\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 15\n      }\n    }, data.id));\n  })));\n};\n\n_s(Home, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = Home;\nexport default withApollo({\n  ssr: true\n})(Home);\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/marcos/Desktop/NextApolloGraphql/src/pages/index.tsx"],"names":["React","withApollo","gql","useQuery","GET_COMPANIES","Home","loading","error","data","characters","results","map","id","ssr"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,UAAT,QAA2B,gBAA3B,C,CACA;AACA;;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AAEA,IAAMC,aAAa,GAAGF,GAAH,mBAAnB;;AAMA,IAAMG,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA;;AAAA,kBAEgBF,QAAQ,CAACC,aAAD,CAFxB;AAAA,MAETE,OAFS,aAETA,OAFS;AAAA,MAEAC,KAFA,aAEAA,KAFA;AAAA,MAEOC,IAFP,aAEOA,IAFP;;AAIf,MAAID,KAAJ,EAAW;AACT,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AACD;;AAED,MAAID,OAAJ,EAAa;AACX,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD;;AAEH,SACE,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCADF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIE,IAAI,CAACC,UAAL,CAAgBC,OAAhB,CAAwBC,GAAxB,CAA6B,UAAAH,IAAI;AAAA,WAC/B;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACI,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKJ,IAAI,CAACI,EAAV,CADF,CAD+B;AAAA,GAAjC,CAFJ,CAHF,CADF;AAeD,CA3BD;;GAAMP,I;UAE6BF,Q;;;KAF7BE,I;AA6BN,eAAeJ,UAAU,CAAC;AAAEY,EAAAA,GAAG,EAAE;AAAP,CAAD,CAAV,CAA0BR,IAA1B,CAAf","sourcesContent":["import React from 'react';\n\nimport { withApollo } from '../libs/apollo';\n// import { useQuery } from '@apollo/react-hooks';\n// import { ALL_CONSULTS } from '../gql/allConsults';\nimport { gql, useQuery } from '@apollo/client';\n\nconst GET_COMPANIES = gql`\n  query companies {\n    id\n  }\n`;\n\nconst Home = () => {\n\n  const { loading, error, data } = useQuery(GET_COMPANIES);\n\n    if (error) {\n      return <h1>Error</h1>\n    }\n\n    if (loading) {\n      return <h1>Loading...</h1>\n    }\n\n  return(\n    <>\n      <h1>Nextjs, Apollo and GraphQl setup</h1>\n\n      <div>\n        {\n          data.characters.results.map( data => (\n            <ul key={data.id}>\n              <li>{data.id}</li>\n            </ul>\n          ))\n        }\n      </div>\n    </>\n    );\n}\n\nexport default withApollo({ ssr: true })(Home);"]},"metadata":{},"sourceType":"module"}