{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/marcos/NextApolloGraphql/src/libs/apollo.tsx\";\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport App from 'next/app';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport createApolloCliente from '../apolloClient';\nvar globalApolloClient = null;\nexport var InitialContext = function InitialContext(ctx) {\n  var inAppContext = Boolean(ctx.ctx);\n\n  if (true) {\n    if (inAppContext) {\n      console.warn('Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n' + 'Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n');\n    }\n  }\n\n  var apolloClient = ctx.apolloClient || initApolloClient(ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx);\n\n  apolloClient.toJSON = function () {\n    return null;\n  };\n\n  ctx.apolloClient = apolloClient;\n\n  if (inAppContext) {\n    ctx.ctx.apolloClient = apolloClient;\n  }\n\n  return ctx;\n};\n_c = InitialContext;\n\nvar initApolloClient = function initApolloClient(initialState, ctx) {\n  if (false) {\n    return createApolloCliente(initialState, ctx);\n  }\n\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloCliente(initialState, ctx);\n  }\n\n  return globalApolloClient;\n};\n\nexport var withApollo = function withApollo() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? false : _ref$ssr;\n\n  return function (PageComponent) {\n    var WithApollo = function WithApollo(_ref2) {\n      var apolloClient = _ref2.apolloClient,\n          apolloState = _ref2.apolloState,\n          pageProps = _objectWithoutProperties(_ref2, [\"apolloClient\", \"apolloState\"]);\n\n      var client;\n\n      if (apolloClient) {\n        client = apolloClient;\n      } else {\n        client = initApolloClient(apolloState, undefined);\n      }\n\n      return __jsx(ApolloProvider, {\n        client: client,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 7\n        }\n      }, __jsx(PageComponent, _extends({}, pageProps, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 9\n        }\n      })));\n    };\n\n    if (true) {\n      var displayName = PageComponent.displayName || PageComponent.name || 'Component';\n      WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n    }\n\n    if (ssr || PageComponent.getInitialProps) {\n      WithApollo.getInitialProps = /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n          var inAppContext, _InitialContext, apolloClient, pageProps, AppTree, _yield$import, getDataFromTree, props;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  inAppContext = Boolean(ctx.ctx);\n                  _InitialContext = InitialContext(ctx), apolloClient = _InitialContext.apolloClient;\n                  pageProps = {};\n\n                  if (!PageComponent.getInitialProps) {\n                    _context.next = 9;\n                    break;\n                  }\n\n                  _context.next = 6;\n                  return PageComponent.getInitialProps(ctx);\n\n                case 6:\n                  pageProps = _context.sent;\n                  _context.next = 13;\n                  break;\n\n                case 9:\n                  if (!inAppContext) {\n                    _context.next = 13;\n                    break;\n                  }\n\n                  _context.next = 12;\n                  return App.getInitialProps(ctx);\n\n                case 12:\n                  pageProps = _context.sent;\n\n                case 13:\n                  if (!false) {\n                    _context.next = 32;\n                    break;\n                  }\n\n                  AppTree = ctx.AppTree;\n\n                  if (!(ctx.res && ctx.res.finished)) {\n                    _context.next = 17;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\", pageProps);\n\n                case 17:\n                  if (!(ssr && AppTree)) {\n                    _context.next = 32;\n                    break;\n                  }\n\n                  _context.prev = 18;\n                  _context.next = 21;\n                  return import('@apollo/react-ssr');\n\n                case 21:\n                  _yield$import = _context.sent;\n                  getDataFromTree = _yield$import.getDataFromTree;\n\n                  if (inAppContext) {\n                    props = _objectSpread(_objectSpread({}, pageProps), {}, {\n                      apolloClient: apolloClient\n                    });\n                  } else {\n                    props = {\n                      pageProps: _objectSpread(_objectSpread({}, pageProps), {}, {\n                        apolloClient: apolloClient\n                      })\n                    };\n                  }\n\n                  _context.next = 26;\n                  return getDataFromTree(__jsx(AppTree, _extends({}, props, {\n                    __self: _this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 98,\n                      columnNumber: 33\n                    }\n                  })));\n\n                case 26:\n                  _context.next = 31;\n                  break;\n\n                case 28:\n                  _context.prev = 28;\n                  _context.t0 = _context[\"catch\"](18);\n                  console.error('Error while running `getDataFromTree`', _context.t0);\n\n                case 31:\n                  Head.rewind();\n\n                case 32:\n                  return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, pageProps), {}, {\n                    apolloState: apolloClient.cache.extrat(),\n                    apolloClient: ctx\n                  }));\n\n                case 33:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[18, 28]]);\n        }));\n\n        return function (_x) {\n          return _ref3.apply(this, arguments);\n        };\n      }();\n    }\n\n    return WithApollo;\n  };\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"InitialContext\");","map":{"version":3,"sources":["/Users/marcos/NextApolloGraphql/src/libs/apollo.tsx"],"names":["React","App","Head","ApolloProvider","createApolloCliente","globalApolloClient","InitialContext","ctx","inAppContext","Boolean","console","warn","apolloClient","initApolloClient","apolloState","toJSON","initialState","withApollo","ssr","PageComponent","WithApollo","pageProps","client","undefined","displayName","name","getInitialProps","AppTree","res","finished","getDataFromTree","props","error","rewind","cache","extrat"],"mappings":"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","sourcesContent":["import React from 'react';\nimport App from 'next/app';\nimport Head from 'next/head';\n\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport createApolloCliente from '../apolloClient';\nimport { createContext } from 'vm';\n\nlet globalApolloClient = null;\n\nexport const InitialContext = (ctx) => {\n  const inAppContext = Boolean(ctx.ctx);\n\n  if (process.env.NODE_ENV === 'development') {\n    if (inAppContext) {\n      console.warn('Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n' +\n      'Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n');\n    }\n  }\n\n  const apolloClient = ctx.apolloClient || initApolloClient(ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx);\n\n  apolloClient.toJSON = () => null;\n\n  ctx.apolloClient = apolloClient;\n  if (inAppContext) {\n    ctx.ctx.apolloClient = apolloClient;\n  }\n\n  return ctx;\n}\n\nconst initApolloClient = (initialState, ctx) => {\n  if (typeof window === 'undefined') {\n    return createApolloCliente(initialState, ctx);\n  }\n\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloCliente(initialState, ctx);\n  }\n\n  return globalApolloClient;\n}\n\nexport const withApollo = ({ ssr = false } = {}) => (PageComponent) => {\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    let client;\n\n    if (apolloClient) {\n      client = apolloClient;\n    } else {\n      client = initApolloClient(apolloState, undefined);\n    }\n\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    );\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component';\n\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async (ctx) => {\n      const inAppContext = Boolean(ctx.ctx);\n      const { apolloClient } = InitialContext(ctx);\n\n      let pageProps = {};\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      } else if (inAppContext) {\n        pageProps = await App.getInitialProps(ctx);\n      }\n\n    if (typeof window === 'undefined') {\n      const { AppTree } = ctx;\n\n      if (ctx.res && ctx.res.finished) {\n        return pageProps;\n      }\n\n      if (ssr && AppTree) {\n        try {\n          const { getDataFromTree } = await import('@apollo/react-ssr');\n\n          let props;\n          if (inAppContext) {\n            props = { ...pageProps, apolloClient };\n          } else {\n            props = {pageProps: { ...pageProps, apolloClient }};\n          }\n\n          await getDataFromTree(<AppTree {...props} />);\n        } catch (error) {\n          console.error('Error while running `getDataFromTree`', error);\n        }\n\n        Head.rewind();\n      }\n    }\n\n    return {\n      ...pageProps,\n      apolloState: apolloClient.cache.extrat(),\n      apolloClient: ctx\n    }\n   };\n }\n\n return WithApollo;\n}"]},"metadata":{},"sourceType":"module"}