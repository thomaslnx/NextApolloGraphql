{"ast":null,"code":"var _jsxFileName = \"/Users/marcos/NextApolloGraphql/src/libs/apollo.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport App from 'next/app';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport createApolloCliente from '../apolloClient';\nlet globalApolloClient = null;\nexport const InitialContext = ctx => {\n  const inAppContext = Boolean(ctx.ctx);\n\n  if (true) {\n    if (inAppContext) {\n      console.warn('Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n' + 'Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n');\n    }\n  }\n\n  const apolloClient = ctx.apolloClient || initApolloClient(ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx);\n\n  apolloClient.toJSON = () => null;\n\n  ctx.apolloClient = apolloClient;\n\n  if (inAppContext) {\n    ctx.ctx.apolloClient = apolloClient;\n  }\n\n  return ctx;\n};\n\nconst initApolloClient = (initialState, ctx) => {\n  if (true) {\n    return createApolloCliente(initialState, ctx);\n  }\n\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloCliente(initialState, ctx);\n  }\n\n  return globalApolloClient;\n};\n\nexport const withApollo = ({\n  ssr = false\n} = {}) => PageComponent => {\n  const WithApollo = (_ref) => {\n    let {\n      apolloClient,\n      apolloState\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"apolloState\"]);\n\n    let client;\n\n    if (apolloClient) {\n      client = apolloClient;\n    } else {\n      client = initApolloClient(apolloState, undefined);\n    }\n\n    return __jsx(ApolloProvider, {\n      client: client,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }\n    })));\n  };\n\n  if (true) {\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component';\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const inAppContext = Boolean(ctx.ctx);\n      const {\n        apolloClient\n      } = InitialContext(ctx);\n      let pageProps = {};\n\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      } else if (inAppContext) {\n        pageProps = await App.getInitialProps(ctx);\n      }\n\n      if (true) {\n        const {\n          AppTree\n        } = ctx;\n\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        }\n\n        if (ssr && AppTree) {\n          try {\n            const {\n              getDataFromTree\n            } = await import('@apollo/react-ssr');\n            let props;\n\n            if (inAppContext) {\n              props = _objectSpread(_objectSpread({}, pageProps), {}, {\n                apolloClient\n              });\n            } else {\n              props = {\n                pageProps: _objectSpread(_objectSpread({}, pageProps), {}, {\n                  apolloClient\n                })\n              };\n            }\n\n            await getDataFromTree(__jsx(AppTree, _extends({}, props, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 33\n              }\n            })));\n          } catch (error) {\n            console.error('Error while running `getDataFromTree`', error);\n          }\n\n          Head.rewind();\n        }\n      }\n\n      return _objectSpread(_objectSpread({}, pageProps), {}, {\n        apolloState: apolloClient.cache.extrat(),\n        apolloClient: ctx\n      });\n    };\n  }\n\n  return WithApollo;\n};","map":{"version":3,"sources":["/Users/marcos/NextApolloGraphql/src/libs/apollo.tsx"],"names":["React","App","Head","ApolloProvider","createApolloCliente","globalApolloClient","InitialContext","ctx","inAppContext","Boolean","console","warn","apolloClient","initApolloClient","apolloState","toJSON","initialState","withApollo","ssr","PageComponent","WithApollo","pageProps","client","undefined","displayName","name","getInitialProps","AppTree","res","finished","getDataFromTree","props","error","rewind","cache","extrat"],"mappings":"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","sourcesContent":["import React from 'react';\nimport App from 'next/app';\nimport Head from 'next/head';\n\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport createApolloCliente from '../apolloClient';\nimport { createContext } from 'vm';\n\nlet globalApolloClient = null;\n\nexport const InitialContext = (ctx) => {\n  const inAppContext = Boolean(ctx.ctx);\n\n  if (process.env.NODE_ENV === 'development') {\n    if (inAppContext) {\n      console.warn('Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n' +\n      'Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n');\n    }\n  }\n\n  const apolloClient = ctx.apolloClient || initApolloClient(ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx);\n\n  apolloClient.toJSON = () => null;\n\n  ctx.apolloClient = apolloClient;\n  if (inAppContext) {\n    ctx.ctx.apolloClient = apolloClient;\n  }\n\n  return ctx;\n}\n\nconst initApolloClient = (initialState, ctx) => {\n  if (typeof window === 'undefined') {\n    return createApolloCliente(initialState, ctx);\n  }\n\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloCliente(initialState, ctx);\n  }\n\n  return globalApolloClient;\n}\n\nexport const withApollo = ({ ssr = false } = {}) => (PageComponent) => {\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    let client;\n\n    if (apolloClient) {\n      client = apolloClient;\n    } else {\n      client = initApolloClient(apolloState, undefined);\n    }\n\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    );\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component';\n\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async (ctx) => {\n      const inAppContext = Boolean(ctx.ctx);\n      const { apolloClient } = InitialContext(ctx);\n\n      let pageProps = {};\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      } else if (inAppContext) {\n        pageProps = await App.getInitialProps(ctx);\n      }\n\n    if (typeof window === 'undefined') {\n      const { AppTree } = ctx;\n\n      if (ctx.res && ctx.res.finished) {\n        return pageProps;\n      }\n\n      if (ssr && AppTree) {\n        try {\n          const { getDataFromTree } = await import('@apollo/react-ssr');\n\n          let props;\n          if (inAppContext) {\n            props = { ...pageProps, apolloClient };\n          } else {\n            props = {pageProps: { ...pageProps, apolloClient }};\n          }\n\n          await getDataFromTree(<AppTree {...props} />);\n        } catch (error) {\n          console.error('Error while running `getDataFromTree`', error);\n        }\n\n        Head.rewind();\n      }\n    }\n\n    return {\n      ...pageProps,\n      apolloState: apolloClient.cache.extrat(),\n      apolloClient: ctx\n    }\n   };\n }\n\n return WithApollo;\n}"]},"metadata":{},"sourceType":"module"}