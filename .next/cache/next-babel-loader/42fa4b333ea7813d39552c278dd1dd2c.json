{"ast":null,"code":"var _jsxFileName = \"/Users/marcos/Desktop/NextApolloGraphql/src/pages/index.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { withApollo } from '../libs/apollo'; // import { useQuery } from '@apollo/react-hooks';\n\nimport { useQuery } from '@apollo/client';\nimport GraphiQL from 'graphiql';\nimport { ALL_CONSULTS } from '../gql/allConsults';\nimport 'graphiql/graphiql.min.css';\n\nconst Home = () => {\n  const URL = 'https://staging.api.upacaipalmas.com/developers/graphiql';\n\n  function graphQLFetcher(graphQLParams) {\n    return fetch(URL, {\n      method: 'get',\n      headers: {\n        \"Content-Type\": \"application/json \"\n      },\n      body: JSON.stringify(graphQLParams)\n    }).then(response => response.json());\n  }\n\n  const defaultQuery = `\n  query {\n    companies {\n      id\n    }\n  }\n  \n  `;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(ALL_CONSULTS);\n\n  if (error) {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 14\n      }\n    }, \"Error\");\n  }\n\n  if (loading) {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 14\n      }\n    }, \"Loading...\");\n  }\n\n  return __jsx(React.Fragment, null, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, \"Nextjs, Apollo and GraphQl setup\"), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, data.characters.results.map(data => __jsx(\"ul\", {\n    key: data.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 15\n    }\n  }, data.id)))), __jsx(GraphiQL, {\n    fetcher: graphQLFetcher,\n    defaultQuery: defaultQuery,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default withApollo({\n  ssr: true\n})(Home);","map":{"version":3,"sources":["/Users/marcos/Desktop/NextApolloGraphql/src/pages/index.tsx"],"names":["React","withApollo","useQuery","GraphiQL","ALL_CONSULTS","Home","URL","graphQLFetcher","graphQLParams","fetch","method","headers","body","JSON","stringify","then","response","json","defaultQuery","loading","error","data","characters","results","map","id","ssr"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,UAAT,QAA2B,gBAA3B,C,CACA;;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,SAASC,YAAT,QAA6B,oBAA7B;AAEA,OAAO,2BAAP;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAEjB,QAAMC,GAAG,GAAG,0DAAZ;;AAEA,WAASC,cAAT,CAAwBC,aAAxB,EAA4C;AAC1C,WAAOC,KAAK,CAACH,GAAD,EAAM;AAChBI,MAAAA,MAAM,EAAE,KADQ;AAEhBC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFO;AAGhBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,aAAf;AAHU,KAAN,CAAL,CAIJO,IAJI,CAKLC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EALP,CAAP;AAOD;;AAED,QAAMC,YAAY,GAAI;;;;;;;GAAtB;AASA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BnB,QAAQ,CAACE,YAAD,CAAzC;;AAEE,MAAIgB,KAAJ,EAAW;AACT,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AACD;;AAED,MAAID,OAAJ,EAAa;AACX,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD;;AAEH,SACE,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCADF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIE,IAAI,CAACC,UAAL,CAAgBC,OAAhB,CAAwBC,GAAxB,CAA6BH,IAAI,IAC/B;AAAI,IAAA,GAAG,EAAEA,IAAI,CAACI,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKJ,IAAI,CAACI,EAAV,CADF,CADF,CAFJ,CAHF,EAaE,MAAC,QAAD;AAAU,IAAA,OAAO,EAAElB,cAAnB;AAAmC,IAAA,YAAY,EAAEW,YAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,CADF;AAiBD,CAlDD;;AAoDA,eAAejB,UAAU,CAAC;AAAEyB,EAAAA,GAAG,EAAE;AAAP,CAAD,CAAV,CAA0BrB,IAA1B,CAAf","sourcesContent":["import React from 'react';\n\nimport { withApollo } from '../libs/apollo';\n// import { useQuery } from '@apollo/react-hooks';\nimport { useQuery } from '@apollo/client';\nimport GraphiQL from 'graphiql';\nimport { ALL_CONSULTS } from '../gql/allConsults';\n\nimport 'graphiql/graphiql.min.css';\n\nconst Home = () => {\n\n  const URL = 'https://staging.api.upacaipalmas.com/developers/graphiql';\n\n  function graphQLFetcher(graphQLParams: any) {\n    return fetch(URL, {\n      method: 'get',\n      headers: { \"Content-Type\": \"application/json \"},\n      body: JSON.stringify(graphQLParams)\n    }).then(\n      response => response.json()\n    )\n  }\n\n  const defaultQuery = `\n  query {\n    companies {\n      id\n    }\n  }\n  \n  `;\n\n  const { loading, error, data } = useQuery(ALL_CONSULTS);\n\n    if (error) {\n      return <h1>Error</h1>\n    }\n\n    if (loading) {\n      return <h1>Loading...</h1>\n    }\n\n  return(\n    <>\n      <h1>Nextjs, Apollo and GraphQl setup</h1>\n\n      <div>\n        {\n          data.characters.results.map( data => (\n            <ul key={data.id}>\n              <li>{data.id}</li>\n            </ul>\n          ))\n        }\n      </div>\n\n      <GraphiQL fetcher={graphQLFetcher} defaultQuery={defaultQuery} />\n    </>\n    );\n}\n\nexport default withApollo({ ssr: true })(Home);"]},"metadata":{},"sourceType":"module"}